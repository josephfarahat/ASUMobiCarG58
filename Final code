#include <NewPing.h>

NewPing sonar(4, 6, 200);
int sensorleft=9 ;
int sensorcenter=10;
int sensorright=11;
void forword(int speed1,int speed2);
void backward(int speed1,int speed2);
void left (int speed1,int speed2);
void right (int speed1,int speed2);
void stop();
void Linefollower();
void BluetoothUltrasonic();
char Data;
unsigned int distanceInCms;
int l3;
int l2;
int l1;
void acc_distance_angle();
 int photopin = 2;
int counter = 0,z=0;
float tick = 3.6;
float tickgoal;
float tickgoal2;
float error ;
float accurate ;
int distance;
void distance_acc(int distance);
int angle;
void angle_acc(int angle);
int g=1;
int k=1;
void Demo();
int s;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600); 
  
pinMode(13,OUTPUT);
pinMode(12,OUTPUT);
pinMode(8,OUTPUT);
pinMode(3,OUTPUT);
pinMode(5,OUTPUT);
pinMode(7,OUTPUT);
pinMode(9,INPUT);
pinMode(10,INPUT);
pinMode(11,INPUT);
pinMode(2,INPUT);

Serial.setTimeout(3000);
}
void loop() {
   if (Serial.available() > 0)
   {
  Data = Serial.read();
    if (Data == 'W')
BluetoothUltrasonic();
if (Data == 'V')
 Linefollower();
if (Data=='C')
 acc_distance_angle();
   if (Data=='U')
  void Demo();
   
}
}
 
void forword(int speed1,int speed2)
{
    digitalWrite(13,0);
  digitalWrite(12,1);
  analogWrite(5,speed1);
  digitalWrite(8,1);
  digitalWrite(7,0);
  analogWrite(3,speed2);
}

void backward(int speed1,int speed2)
{
    digitalWrite(13,1);
  digitalWrite(12,0);
  analogWrite(5,speed1);
  digitalWrite(8,0);
  digitalWrite(7,1);
  analogWrite(3,speed2);
}
void left(int speed1,int speed2)
{
   digitalWrite(13,0);
  digitalWrite(12,1);
  analogWrite(5,speed1);
  digitalWrite(8,0);
  digitalWrite(7,1);
  analogWrite(3,speed2);
}
void right(int speed1,int speed2)
{
   digitalWrite(13,1);
  digitalWrite(12,0);
  analogWrite(5,speed1);
  digitalWrite(8,1);
  digitalWrite(7,0);
  analogWrite(3,speed2);
}
void stop()
{
   digitalWrite(13,0);
  digitalWrite(12,0);
  analogWrite(5,0);
  digitalWrite(8,0);
  digitalWrite(7,0);
  analogWrite(3,0);
}


void BluetoothUltrasonic()
{
  while(1)
  {
    char Data = Serial.read();
    if (Data == 'V')
    Linefollower();
    if (Data=='C')
acc_distance_angle();
   if (Data=='U')
  Demo();
      
 unsigned int distanceInCms = sonar.ping() / US_ROUNDTRIP_CM;
Serial.println("Distance: " + String(distanceInCms) + "cm");
 if (Data == 'F' && distanceInCms  <40) stop();
 
  else if(Data == 'F')        //move forwards 
 { 
forword(115,110);
 } 
 else if (Data == 'B')       //move backwards 
 { 
   backward(115,110);
 } 
 else if (Data == 'S')     //stop!! 
 {    
stop();
 } 
 else if (Data == 'R')    //right 
 { 
right(0,115);
 } 
 else if (Data == 'L')     //left 
 { 
left (115,0);
 } 
else stop();
  }
}

void Linefollower()
{
  while (1)
{
char Data= Serial.read();
if (Data=='W')

BluetoothUltrasonic();

if (Data=='C')
acc_distance_angle();
   if (Data=='U')
  Demo();

int l1=digitalRead(sensorleft);
int l2=digitalRead(sensorcenter);
int l3=digitalRead(sensorright);
int y;
int x;
int z;
Serial.print(l2);
if (l1==0&&l2==0&&l3==0)
{
stop();
}
else if(l1==0&&l2==0&&l3==1 || l1==0&&l2==1&&l3==1)   //left turn
{
  left (75,100);
  y==1;

 }
 else if(l1==1&&l2==0&&l3==0 || l1==1&&l2==1&&l3==0) //right turn
{
right(100,75);
    x==1;
}  
 else if( l1==1&&l2==0&&l3==1 || l1==0&&l2==1&&l3==0)  // go forward straight
  {
forword (100,100);

  z==1;
   }
else if (l1==1&&l2==1&&l3==1)
   {
if (x==1)
  
   {
     right(100,75);
  }   
  else if (y==1)
  
   {
    left (75,100);
  }
  else if(z==1)
  {
 forword(100,100);
  }
   }
}
}
void acc_distance_angle()
{
  while(1)
  {
    char Data= Serial.read();
if (Data=='W')

BluetoothUltrasonic();
if (Data == 'V')
    Linefollower();
       if (Data=='U')
  Demo();
    
   if (Data=='d')
   { 
    distance=Serial.parseInt();
     Serial.println(distance);
  distance_acc(distance);
  }
  else if (Data=='a')
  {
   angle=Serial.parseInt();
     Serial.println(angle);
  angle_acc(angle); 
  }
   stop();
   g=1;
   k=1;
  }

}

void distance_acc(int distance)
{ 
while( g!=0)
{
  
  Serial.println(counter);
  error = distance*0.004;
  accurate = (1-error)*distance;
  if (distance>30)
  {
    tickgoal=tick*accurate;
  }
  else tickgoal=tick*distance;
   int qq;
   qq = digitalRead(photopin);
  if( qq == 0)
{
int  z=qq;
  if (z=!0)
  {
   counter++;
  }

}
  forword(103,110);
Serial.println(counter);
if( counter > tickgoal)
{
  g=0;
  counter=0;
}

}
}

void angle_acc( int angle )

{
  while(k!=0)
  {
    Serial.println(counter);
    tickgoal2 = angle * tick* 0.339;
  left(100,50);
  int qq;
 qq = digitalRead(photopin);
    if( qq == 0)
{
int  z=qq;
  if (z=!0)
  {
   counter++;
  }
}
if( counter > tickgoal2)
{
  k=0;
  counter=0;
}

}
}
void Demo ()
{
  while(1)
  {
    char Data= Serial.read();
if (Data=='W')
BluetoothUltrasonic();
if (Data == 'V')
 Linefollower();   
if (Data=='C')
acc_distance_angle();

  for (int i =0; i<4; i++)
{
 distance_acc(200);
  stop();
  delay(1000);
  g=1;
  angle_acc(90);
  stop();
  delay(1000);
  k=1;
 s=1; 
}
  if(s==1)
  break;
}
}
